35. Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

SOURCE CODE:

int searchInsert(int* nums, int numsSize, int target) {
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] >= target) {
            return i;
        }
    }
    return numsSize; 
}

OUTPUT:

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 3

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

    (OR)

#include <stdio.h>
int search(int nums[],int numssize,int target) {
    
	int left=0,right=numssize-1;

	while(left<=right)
	{
	    int mid;
		mid=(left+right)/2;
		if(nums[mid]==target)
		{
			return mid;
		}
		if(nums[mid]<target)
		{
			left=mid+1;
			
		}
		else if(nums[mid]>target)
		{
			right=mid-1;
		}
		else
		{
		    if(target>nums[numssize]&&target<nums[numssize])
		    {
		        numssize=numssize+1;
		    }
		}
	}

}
int main()
{
    int nums[ ]={1,2,4,5};
    int target=7;
    int result=search(nums,5,target);
    if(result!=-1)
    {
        printf("Target %d found at index %d\n", target, result);
    }
    else
    {
        printf("Target %d not found\n", result);
    }
}

OUTPUT:

Target 7 found at index 5
