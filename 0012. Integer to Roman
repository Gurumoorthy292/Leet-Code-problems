Seven different symbols represent Roman numerals with the following values:

Symbol	Value
I	1
V	5
X	10
L	50
C	100
D	500
M	1000
Roman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:
If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.
If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).
Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.
Given an integer, convert it to a Roman numeral.

SOURCE CODE:
char* intToRoman(int num) {
    // Allocate enough memory for the result string
    // Max length of Roman numeral for numbers up to 3999 is 15 (e.g., "MMMCMXCIX")
    char* s = (char*)malloc(20 * sizeof(char)); 
    int i = 0;
    
    // Handle the largest values first (greedy approach)
    while (num >= 1000) {
        s[i++] = 'M';
        num -= 1000;
    }
    
    // Check for 900 (CM)
    if (num >= 900) {
        s[i++] = 'C';
        s[i++] = 'M';
        num -= 900;
    }
    
    // Handle 500 (D)
    while (num >= 500) {
        s[i++] = 'D';
        num -= 500;
    }
    
    // Check for 400 (CD)
    if (num >= 400) {
        s[i++] = 'C';
        s[i++] = 'D';
        num -= 400;
    }
    
    // Handle 100 (C)
    while (num >= 100) {
        s[i++] = 'C';
        num -= 100;
    }
    
    // Check for 90 (XC)
    if (num >= 90) {
        s[i++] = 'X';
        s[i++] = 'C';
        num -= 90;
    }
    
    // Handle 50 (L)
    while (num >= 50) {
        s[i++] = 'L';
        num -= 50;
    }
    
    // Check for 40 (XL)
    if (num >= 40) {
        s[i++] = 'X';
        s[i++] = 'L';
        num -= 40;
    }
    
    // Handle 10 (X)
    while (num >= 10) {
        s[i++] = 'X';
        num -= 10;
    }
    
    // Check for 9 (IX)
    if (num >= 9) {
        s[i++] = 'I';
        s[i++] = 'X';
        num -= 9;
    }
    
    // Handle 5 (V)
    while (num >= 5) {
        s[i++] = 'V';
        num -= 5;
    }
    
    // Check for 4 (IV)
    if (num >= 4) {
        s[i++] = 'I';
        s[i++] = 'V';
        num -= 4;
    }
    
    // Handle 1 (I)
    while (num >= 1) {
        s[i++] = 'I';
        num -= 1;
    }
    
    // Null-terminate the string
    s[i] = '\0';
    
    // Return the constructed Roman numeral string
    return s;
}
OUTPUT:

Example 1:

Input: num = 3749
Output: "MMMDCCXLIX"
Explanation:
3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)
 700 = DCC as 500 (D) + 100 (C) + 100 (C)
  40 = XL as 10 (X) less of 50 (L)
   9 = IX as 1 (I) less of 10 (X)
Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places

Example 2:

Input: num = 58
Output: "LVIII"
Explanation:
50 = L
 8 = VIII

Example 3:

Input: num = 1994
Output: "MCMXCIV"
Explanation:
1000 = M
 900 = CM
  90 = XC
   4 = IV
